package com.sparkstreaming.operation

import java.io.File
import java.nio.charset.Charset

import com.google.common.io.Files
import com.sparkstreaming.operation.dstream_accumulators.{DroppedWordsCounter, WordBlacklist}
import org.apache.spark.SparkConf
import org.apache.spark.rdd.RDD
import org.apache.spark.streaming.{Seconds, StreamingContext, Time}

/**
  * Created by root on 2019/9/15.
  */
object dstream_ha {

  def createContext(ip: String, port: Int, checkpointDirectory: String)
  : StreamingContext = {

    // If you do not see this printed, that means the StreamingContext has been loaded
    // from the new checkpoint
    println("Creating new context")

    val sparkConf = new SparkConf().setMaster("local[2]")setAppName("RecoverableNetworkWordCount")
    // Create the context with a 1 second batch size
    val ssc = new StreamingContext(sparkConf, Seconds(5))
    ssc.checkpoint(checkpointDirectory)

    // Create a socket stream on target ip:port and count the
    // words in input stream of \n delimited text (eg. generated by 'nc')
    val lines = ssc.socketTextStream(ip, port)
    val words = lines.flatMap(_.split(" "))
    val wordCounts = words.map((_, 1)).reduceByKey(_ + _)
    wordCounts.print()
    ssc
  }

  def main(args: Array[String]) {
    val ssc = StreamingContext.getOrCreate("D:\\tmp\\sparkstreaming\\checkpoint-004",
      () => createContext("localhost", 9999,"D:\\tmp\\sparkstreaming\\checkpoint-004"))
    ssc.start()
    ssc.awaitTermination()
  }



}
